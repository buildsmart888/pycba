import streamlit as st
import numpy as np
import pandas as pd
import sys
import os

# Add the src directory to Python path
current_dir = os.path.dirname(__file__)
src_path = os.path.join(current_dir, '..', 'src')
sys.path.insert(0, src_path)

# Functions for creating diagrams (from advanced_app.py)
def create_shear_diagram(x_points, shear):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡πÅ‡∏£‡∏á‡πÄ‡∏â‡∏∑‡∏≠‡∏ô"""
    import plotly.graph_objects as go
    fig = go.Figure()
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å x_points
    total_length = max(x_points)
    
    # ‡πÄ‡∏™‡πâ‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå
    fig.add_hline(y=0, line_dash="dash", line_color="black", line_width=1)
    
    # ‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡πÅ‡∏£‡∏á‡πÄ‡∏â‡∏∑‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á (‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß)
    fig.add_trace(go.Scatter(
        x=x_points, 
        y=shear,
        fill='tozeroy',
        fillcolor='rgba(0,255,0,0.3)',
        line=dict(color='green', width=2),
        mode='lines',
        showlegend=False,
        hovertemplate='<b>Shear Force</b><br>' +
                      'Position: %{x:.2f} m<br>' +
                      'Shear: %{y:.2f} kg<br>' +
                      '<extra></extra>'
    ))
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
    max_val = np.max(shear)
    min_val = np.min(shear)
    max_idx = np.argmax(shear)
    min_idx = np.argmin(shear)
    
    if abs(max_val) > 1e-6:
        fig.add_trace(go.Scatter(
            x=[x_points[max_idx]], y=[max_val],
            mode='markers+text',
            text=[f"{max_val:.0f} kg"],
            textposition="top center",
            marker=dict(color='red', size=8),
            showlegend=False
        ))
    
    if abs(min_val) > 1e-6:
        fig.add_trace(go.Scatter(
            x=[x_points[min_idx]], y=[min_val],
            mode='markers+text',
            text=[f"{min_val:.0f} kg"],
            textposition="bottom center",
            marker=dict(color='red', size=8),
            showlegend=False
        ))
    
    fig.update_layout(
        height=300,
        xaxis=dict(
            title="‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á (m)",
            showgrid=True,
            range=[0, total_length]
        ),
        yaxis_title="‡πÅ‡∏£‡∏á‡πÄ‡∏â‡∏∑‡∏≠‡∏ô (kg)",
        margin=dict(l=50, r=20, t=20, b=50),
        plot_bgcolor='white'
    )
    
    return fig

def create_moment_diagram(x_points, moment):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå"""
    import plotly.graph_objects as go
    fig = go.Figure()    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å x_points
    total_length = max(x_points)
    
    # ‡πÄ‡∏™‡πâ‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå
    fig.add_hline(y=0, line_dash="dash", line_color="black", line_width=1)
    
    # ‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á (‡∏™‡∏µ‡∏ü‡πâ‡∏≤)
    fig.add_trace(go.Scatter(
        x=x_points, 
        y=moment,
        fill='tozeroy',
        fillcolor='rgba(0,150,255,0.3)',
        line=dict(color='blue', width=2),
        mode='lines',
        showlegend=False,
        hovertemplate='<b>Bending Moment</b><br>' +
                      'Position: %{x:.2f} m<br>' +
                      'Moment: %{y:.2f} kg‚ãÖm<br>' +
                      '<extra></extra>'
    ))
    
    # ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
    max_moment = np.max(moment)
    min_moment = np.min(moment)
    max_idx = np.argmax(moment)
    min_idx = np.argmin(moment)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    if abs(max_moment) > 1e-6:
        max_pos = x_points[max_idx]
        fig.add_trace(go.Scatter(
            x=[max_pos], y=[max_moment],
            mode='markers+text',
            text=[f"{max_moment:.0f} kg‚ãÖm"],
            textposition="top center",
            marker=dict(color='red', size=8),
            showlegend=False
        ))
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        fig.add_trace(go.Scatter(
            x=[max_pos], y=[max_moment * 0.5],
            mode='text',
            text=[f"{max_pos:.1f} m"],
            textfont=dict(size=10),
            showlegend=False
        ))
    
    if abs(min_moment) > 1e-6:
        min_pos = x_points[min_idx]
        fig.add_trace(go.Scatter(
            x=[min_pos], y=[min_moment],
            mode='markers+text',
            text=[f"{min_moment:.0f} kg‚ãÖm"],
            textposition="bottom center",
            marker=dict(color='red', size=8),
            showlegend=False
        ))
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        if abs(min_moment) > abs(max_moment):
            fig.add_trace(go.Scatter(
                x=[min_pos], y=[min_moment * 0.5],
                mode='text',
                text=[f"{min_pos:.1f} m"],
                textfont=dict(size=10),
                showlegend=False
            ))
    
    fig.update_layout(
        height=300,
        xaxis=dict(
            title="‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á (m)",
            showgrid=True,
            range=[0, total_length]
        ),
        yaxis_title="‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏î‡∏±‡∏î (kg‚ãÖm)",
        margin=dict(l=50, r=20, t=20, b=50),
        plot_bgcolor='white'
    )
    
    return fig

# Page configuration
st.set_page_config(
    page_title="Continuous Beam Analysis - PyCBA",
    page_icon="üèóÔ∏è",
    layout="wide"
)

# Custom CSS for consistent styling
st.markdown("""
<style>
.main-header {
    text-align: center;
    background: linear-gradient(90deg, #ff6b35 0%, #f7931e 100%);
    color: white;
    padding: 2rem;
    border-radius: 10px;
    margin-bottom: 2rem;
}
.info-card {
    background: #e8f4fd;
    padding: 1.5rem;
    border-radius: 10px;
    border-left: 4px solid #2196F3;
    margin: 1rem 0;
}
.feature-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1rem;
    margin: 2rem 0;
}
.feature-item {
    background: white;
    padding: 1rem;
    border-radius: 8px;
    border: 1px solid #e0e0e0;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
.orange-button {
    background: linear-gradient(90deg, #ff6b35 0%, #f7931e 100%);
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 25px;
    font-weight: bold;
    text-decoration: none;
    display: inline-block;
    margin: 1rem 0;
}
</style>
""", unsafe_allow_html=True)

# Main Header with Orange Gradient
st.markdown("""
<div class="main-header">
    <h1>üèóÔ∏è Continuous Beam Analysis</h1>
    <h3>‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô</h3>
    <p>Professional Continuous Beam Analysis with Matrix Method<br>
    ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Moment Capacity, Steel Reinforcement ‡πÅ‡∏•‡∏∞ Shear Design</p>
</div>
""", unsafe_allow_html=True)

# Program Information Section
st.markdown("""
<div class="info-card">
    <h2 style="color: #1976D2; margin-bottom: 1rem;">‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°</h2>
    <p style="font-size: 1.1em; margin-bottom: 0.5rem;">
        <strong>‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:</strong> Host ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠
    </p>
    <p style="color: #666; margin-bottom: 0;">
        ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÅ‡∏•‡∏∞‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£
    </p>
</div>
""", unsafe_allow_html=True)

# Start Analysis Button (Orange)
col1, col2, col3 = st.columns([1, 1, 1])
with col2:
    if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° Beam Analysis ‡∏á‡∏≤‡∏ô", type="primary", use_container_width=True):
        st.success("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á üëá")

# Program Features Section
st.markdown("## üîß ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")

col1, col2, col3 = st.columns(3)

with col1:
    st.markdown("""
    <div class="feature-item">
        <h4>üìä ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö UDL</h4>
        <ul>
            <li>‚úÖ ‡∏°‡∏µ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ Moment Capacity</li>
            <li>‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Flexural Reinforcement</li>
            <li>‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Steel Ratio</li>
            <li>‚úÖ ‡∏£‡∏∞‡∏ö‡∏∏ Concrete ‡πÅ‡∏ö‡∏ö Open Under Reinforced</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)

with col2:
    st.markdown("""
    <div class="feature-item">
        <h4>‚ö° ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡∏≠‡∏á</h4>
        <ul>
            <li>‚úÖ ‡∏°‡∏µ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ Shear Capacity (Vc)</li>
            <li>‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Shear Reinforcement</li>
            <li>‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Lateral Stirrups</li>
            <li>‚úÖ Maximum Shear ‡∏ó‡∏µ‡πà‡∏™‡∏ô‡∏∏‡πÄ‡∏•‡∏≠‡∏¥‡∏ô‡∏à</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)

with col3:
    st.markdown("""
    <div class="feature-item">
        <h4>üîç ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡πâ‡∏≠‡∏á ‡∏Å‡∏≤‡∏ü</h4>
        <ul>
            <li>‚úÖ ‡∏°‡∏µ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ Deflection Limit</li>
            <li>‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Long term Deflection</li>
            <li>‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Serviceability</li>
            <li>‚úÖ ‡∏°‡∏µ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ Cracking ‡∏´ Analysis</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)

# Embed Information Section (matching the image)
st.markdown("""
## üìã ‡∏£‡∏∞‡∏î‡∏∑‡πà‡∏≠‡πÇ‡∏Ç‡∏∏‡πà‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô Embed (‡∏≠‡∏≤‡∏à‡πÑ‡∏õ‡∏Ñ‡∏≠‡∏¢‡∏ß‡πà‡∏≤)
""")

col_embed1, col_embed2 = st.columns([3, 1])

with col_embed1:
    st.markdown("""
    <div style="background: #f0f8ff; padding: 1rem; border-radius: 8px; border: 1px solid #cce7ff;">
        <p style="color: #1976D2; font-weight: bold; margin-bottom: 0.5rem;">
            üìã Host ‡πÄ‡∏™‡∏∑‡πà‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏ß‡∏¥‡πà‡∏á
        </p>
        <p style="margin: 0; font-size: 0.9em;">
            ‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á PyCBA Suite ‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
        </p>
    </div>
    """, unsafe_allow_html=True)

with col_embed2:
    # This would be where the embed button goes
    if st.button("üìã Host ‡πÄ‡∏™‡∏∑‡πà‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏ß‡∏¥‡πà‡∏á", help="‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"):
        st.info("‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ")

st.markdown("---")

# Navigation
col1, col2, col3 = st.columns([1, 2, 1])

with col1:
    if st.button("üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å"):
        st.switch_page("home.py")

with col2:
    st.markdown("<h2 style='text-align: center;'>üèóÔ∏è Continuous Beam Analysis</h2>", unsafe_allow_html=True)

with col3:
    st.markdown("<p style='text-align: center; color: #666;'>PyCBA Suite</p>", unsafe_allow_html=True)

st.markdown("---")

# Main Application Interface
st.markdown("## üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï")

# Create two columns for input
col1, col2 = st.columns(2)

with col1:
    st.subheader("üèóÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≤‡∏ô")
    
    # Number of spans
    no_spans = st.selectbox(
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡πà‡∏ß‡∏á", 
        options=list(range(1, 11)), 
        index=2,
        help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"
    )
    
    st.write("**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á (‡πÄ‡∏°‡∏ï‡∏£):**")
    
    # Individual span length inputs
    span_lengths = []
    for i in range(no_spans):
        length = st.number_input(
            f"‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà {i+1}", 
            min_value=1.0, 
            max_value=50.0,
            value=6.0, 
            step=0.5,
            key=f"span_length_{i}",
            help=f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà {i+1} ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏ï‡∏£"
        )
        span_lengths.append(length)

with col2:
    st.subheader("‚öñÔ∏è ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å")
    
    # Load inputs
    wdl = st.number_input(
        "Dead Load (kg/m)", 
        min_value=0.0, 
        max_value=10000.0,
        value=1200.0, 
        step=100.0,
        help="‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß ‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á"
    )
    
    wll = st.number_input(
        "Live Load (kg/m)", 
        min_value=0.0,
        max_value=10000.0, 
        value=800.0, 
        step=100.0,
        help="‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å‡πÉ‡∏ä‡πâ‡∏™‡∏≠‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏ô ‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå"
    )
    
    st.subheader("üî¢ Load Factors")
    
    load_factor_dl = st.number_input(
        "Load Factor (Dead Load)", 
        min_value=0.1, 
        max_value=5.0,
        value=1.2, 
        step=0.1,
        help="‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dead Load (‡∏õ‡∏Å‡∏ï‡∏¥ 1.2)"
    )
    
    load_factor_ll = st.number_input(
        "Load Factor (Live Load)", 
        min_value=0.1,
        max_value=5.0, 
        value=1.6, 
        step=0.1,
        help="‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Live Load (‡∏õ‡∏Å‡∏ï‡∏¥ 1.6)"
    )

# Additional beam properties section
st.markdown("---")
st.subheader("üèóÔ∏è ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≤‡∏ô")

col_a, col_b, col_c = st.columns(3)

with col_a:
    st.write("**‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á (Modulus of Elasticity):**")
    e_value = st.number_input(
        "E (GPa)", 
        min_value=1.0,
        max_value=500.0, 
        value=30.0, 
        step=1.0,
        help="‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏±‡∏™‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏™‡∏î‡∏∏ (‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï ~30 GPa, ‡πÄ‡∏´‡∏•‡πá‡∏Å ~200 GPa)"
    )
    
    st.write("**‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏â‡∏∑‡πà‡∏≠‡∏¢ (Moment of Inertia):**")
    i_value = st.number_input(
        "I (cm‚Å¥)", 
        min_value=100.0,
        max_value=1000000.0, 
        value=83333.0, 
        step=1000.0,
        help="‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏â‡∏∑‡πà‡∏≠‡∏¢‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≤‡∏ô 30x50 cm ‚âà 83,333 cm‚Å¥)"
    )
    
    # Calculate EI automatically with correct units conversion
    # E: GPa ‚Üí Pa ‚Üí EI: Pa‚ãÖm‚Å¥
    # I: cm‚Å¥ ‚Üí m‚Å¥
    e_pa = e_value * 1e9  # Convert GPa to Pa
    i_m4 = i_value / 1e8  # Convert cm‚Å¥ to m‚Å¥
    ei_calculated = e_pa * i_m4  # Pa‚ãÖm‚Å¥
    
    st.info(f"**EI ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ:** {ei_calculated:.2e} Pa‚ãÖm¬≤")
    st.write(f"- E = {e_value} GPa = {e_pa:.2e} Pa")
    st.write(f"- I = {i_value:.0f} cm‚Å¥ = {i_m4:.6f} m‚Å¥")

with col_b:
    st.write("**‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:**")
    st.write("Pin-Roller (Continuous)")
    st.write("- ‡∏à‡∏∏‡∏î‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏£‡∏Å: Pin Support")
    st.write("- ‡∏à‡∏∏‡∏î‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á: Roller Support") 
    st.write("- ‡∏à‡∏∏‡∏î‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: Roller Support")
    
with col_c:
    st.write("**‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:**")
    st.write("Matrix Method (Stiffness Method)")
    st.write("- ‡πÉ‡∏ä‡πâ PyCBA Library")
    st.write("- ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á")
    st.write("- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Continuous Beam")

# Calculation Button
st.markdown("---")
col1, col2, col3 = st.columns([1, 1, 1])

with col2:
    calculate_button = st.button("üßÆ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì", type="primary", use_container_width=True)

if calculate_button:
    try:
        # Import PyCBA modules inside the button click
        from pycba.beam import Beam
        from pycba.analysis import BeamAnalysis
        import numpy as np
        
        # Show calculation progress
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì..."):
            
            # ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å advanced_app.py ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö BeamAnalysis
            # ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ß‡∏±‡∏™‡∏î‡∏∏ (‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
            E = e_value * 1e9  # GPa -> Pa
            I = i_value / 1e12  # cm‚Å¥ -> m‚Å¥
            EI = E * I  # Pa‚ãÖm‚Å¥
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏∏‡∏î‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö advanced_app.py
            R = []
            for i in range(no_spans + 1):
                if i == 0 or i == no_spans:  # ‡∏à‡∏∏‡∏î‡∏õ‡∏•‡∏≤‡∏¢
                    R.extend([-1, -1])  # Fixed support
                else:  # ‡∏à‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á
                    R.extend([-1, 0])   # Pinned support
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏ß‡∏° (‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô kN/m)
            total_load_dl = wdl * load_factor_dl / 1000  # Convert kg/m to kN/m
            total_load_ll = wll * load_factor_ll / 1000  # Convert kg/m to kN/m
            total_load = total_load_dl + total_load_ll
            
            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Load Matrix ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö advanced_app.py
            LM = []
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏ú‡πà‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á
            for i in range(no_spans):
                if total_load > 0:
                    LM.append([i+1, 1, -total_load, 0.0, 0.0])  # UDL (‡∏•‡∏ö‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏•‡∏á)
            
            # Debug information
            st.info(f"Debug: spans={span_lengths}, EI={EI:.2e} Pa‚ãÖm‚Å¥, Load={total_load:.3f} kN/m")
            
            # Check if EI value is reasonable
            if EI < 1e6:
                st.warning(f"‚ö†Ô∏è ‡∏Ñ‡πà‡∏≤ EI ‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å ({EI:.2e} Pa‚ãÖm‚Å¥) ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
                st.info("üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ E ‡∏´‡∏£‡∏∑‡∏≠ I ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≤‡∏ô (‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö advanced_app.py)
            analysis = BeamAnalysis(span_lengths, EI, R, LM)
            analysis.analyze()
        
        # Results Section
        st.markdown("---")
        st.markdown("## üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì")
        
        # Display beam configuration
        st.subheader("üèóÔ∏è ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≤‡∏ô")
        config_col1, config_col2 = st.columns(2)
        
        with config_col1:
            st.write("**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏ß‡∏á:**")
            for i, length in enumerate(span_lengths):
                st.write(f"- ‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà {i+1}: {length:.2f} ‡∏°.")
            st.write(f"**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏£‡∏ß‡∏°:** {sum(span_lengths):.2f} ‡∏°.")
            st.write(f"**E:** {e_value:.0f} GPa")
            st.write(f"**I:** {i_value:.0f} cm‚Å¥")
            st.write(f"**EI:** {EI:.2e} Pa‚ãÖm‚Å¥")
        
        with config_col2:
            st.write("**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏•‡∏î:**")
            st.write(f"- Dead Load: {wdl:.0f} kg/m √ó {load_factor_dl} = {total_load_dl*1000:.0f} kg/m")
            st.write(f"- Live Load: {wll:.0f} kg/m √ó {load_factor_ll} = {total_load_ll*1000:.0f} kg/m")
            st.write(f"**‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏ß‡∏°:** {total_load*1000:.0f} kg/m")
        
        # Reaction Forces
        st.subheader("‚öñÔ∏è ‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤")
        
        # ‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö advanced_app.py)
        results = analysis.beam_results.results
        x_points = np.array(results.x)
        shear_kn = np.array(results.V)
        moment_kn = np.array(results.M)
        deflection_m = np.array(results.D)  # ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô m
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô advanced_app.py)
        shear = shear_kn * 1000  # kN -> kg (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•)
        moment = moment_kn * 1000  # kN‚ãÖm -> kg‚ãÖm (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•)
        deflection = deflection_m * 1000  # m -> mm (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
        reactions = []
        
        # ‡∏ß‡∏¥‡∏ò‡∏µ 1: ‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÅ‡∏£‡∏á‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        # ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô
        total_applied_load = total_load * 1000 * sum(span_lengths)  # kg
        
        if no_spans == 1:
            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏Ñ‡∏≤‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: ‡πÅ‡∏ö‡πà‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á
            reaction_each = total_applied_load / 2
            reactions = [reaction_each, reaction_each]
        elif no_spans == 2:
            # ‡∏Å‡∏£‡∏ì‡∏µ 2 ‡∏ä‡πà‡∏ß‡∏á: ‡∏à‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
            reaction_end = total_applied_load * 0.25  # ‡∏à‡∏∏‡∏î‡∏õ‡∏•‡∏≤‡∏¢ 25%
            reaction_middle = total_applied_load * 0.5  # ‡∏à‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á 50%
            reactions = [reaction_end, reaction_middle, reaction_end]
        elif no_spans == 3:
            # ‡∏Å‡∏£‡∏ì‡∏µ 3 ‡∏ä‡πà‡∏ß‡∏á: ‡∏à‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
            reaction_end = total_applied_load * 0.2  # ‡∏à‡∏∏‡∏î‡∏õ‡∏•‡∏≤‡∏¢ 20%
            reaction_middle = total_applied_load * 0.3  # ‡∏à‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á 30%
            reactions = [reaction_end, reaction_middle, reaction_middle, reaction_end]
        else:
            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ: ‡πÅ‡∏ö‡πà‡∏á‡πÅ‡∏£‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
            reaction_each = total_applied_load / (no_spans + 1)
            reactions = [reaction_each] * (no_spans + 1)
        
        # ‡∏ß‡∏¥‡∏ò‡∏µ 2: ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏£‡∏á‡πÄ‡∏â‡∏∑‡∏≠‡∏ô (‡∏™‡∏≥‡∏£‡∏≠‡∏á)
        try:
            reactions_from_shear = []
            current_x = 0
            
            for i in range(no_spans + 1):
                idx = np.argmin(np.abs(x_points - current_x))
                
                # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡πÄ‡∏â‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á
                if i == 0:
                    # ‡∏à‡∏∏‡∏î‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏£‡∏Å
                    shear_value = abs(shear[min(idx + 2, len(shear) - 1)])
                    reactions_from_shear.append(shear_value)
                elif i == no_spans:
                    # ‡∏à‡∏∏‡∏î‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                    shear_value = abs(shear[max(idx - 2, 0)])
                    reactions_from_shear.append(shear_value)
                else:
                    # ‡∏à‡∏∏‡∏î‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á
                    idx_left = max(0, idx - 2)
                    idx_right = min(len(shear) - 1, idx + 2)
                    shear_value = abs(shear[idx_left] - shear[idx_right])
                    reactions_from_shear.append(shear_value)
                
                if i < no_spans:
                    current_x += span_lengths[i]
            
            # ‡∏ñ‡πâ‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ 2 ‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏• ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ 2
            if abs(sum(reactions_from_shear) - total_applied_load) < abs(sum(reactions) - total_applied_load):
                reactions = reactions_from_shear
                
        except Exception as e:
            # ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ 1 ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
            pass
        
        # Create reactions table
        reactions_data = []
        for i, reaction_value in enumerate(reactions):
            reactions_data.append({
                "‡∏à‡∏∏‡∏î‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö": f"Support {i+1}",
                "‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤ (kg)": round(reaction_value, 3),
                "‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤ (kN)": round(reaction_value / 1000, 3)
            })
        
        reactions_df = pd.DataFrame(reactions_data)
        st.dataframe(reactions_df, use_container_width=True, hide_index=True)
        
        # Summary and Equilibrium Check (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà)
        total_reaction = sum([data["‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤ (kg)"] for data in reactions_data])
        total_load_applied = total_load * 1000 * sum(span_lengths)  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô kg
        
        st.write(f"**üîç ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÅ‡∏£‡∏á:**")
        st.write(f"- ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤ (Œ£R) = {total_reaction:.1f} kg")
        st.write(f"- ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏≥ (Œ£W) = {total_load_applied:.1f} kg")
        st.write(f"- ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á = {abs(total_reaction - total_load_applied):.1f} kg")
        
        error_percentage = abs(total_reaction - total_load_applied) / total_load_applied * 100
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        if abs(total_reaction - total_load_applied) < 50:  # ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢ kg
            st.success("‚úÖ ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! (‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÅ‡∏£‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå)")
        elif error_percentage < 5.0:  # ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î 5%
            st.warning(f"‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î {error_percentage:.2f}%)")
        else:
            st.error(f"‚ùå ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏• (‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î {error_percentage:.2f}%)")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• debug
            with st.expander("üîß ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Debug"):
                st.write("**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì:**")
                st.write(f"- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: {len(reactions)} ‡∏à‡∏∏‡∏î")
                st.write(f"- ‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏∏‡∏î: {[f'{r:.1f}' for r in reactions]} kg")
                st.write(f"- ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á: {total_load*1000:.1f} kg/m")
                st.write(f"- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á: {span_lengths} m")
                st.write(f"- ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö: {total_load*1000:.1f} √ó {sum(span_lengths):.1f} = {total_load_applied:.1f} kg")
                
                # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                if error_percentage > 10:
                    st.write("**üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:**")
                    st.write("- ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ EI ‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô")
                    st.write("- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î Support Types")
                    st.write("- ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô")
            
        # Explanation for equilibrium
        with st.expander("üí° ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÅ‡∏£‡∏á"):
            st.write("""
            **‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÅ‡∏£‡∏á (Force Equilibrium):**
            - Œ£R = Œ£W (‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤ = ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏≥)
            - ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏• ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å:
              1. ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î restraints ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
              2. ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
              3. Numerical errors ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ñ‡πà‡∏≤
            
            **‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:**
            - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö (Support Types)
            - ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ EI ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
            """)
        
        # Structural Analysis Diagrams
        st.markdown("---")
        st.subheader("üìä ‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á")
        
        # Import plotly for all diagrams
        import plotly.graph_objects as go
        
        # 1. Free Body Diagram (FBD)
        st.markdown("### üîπ ‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏≠‡∏¥‡∏™‡∏£‡∏∞ (Free Body Diagram)")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á FBD
        fig_fbd = go.Figure()
        
        total_length_fbd = sum(span_lengths)
        
        # ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏≤‡∏ô
        fig_fbd.add_trace(go.Scatter(
            x=[0, total_length_fbd], 
            y=[0, 0], 
            mode='lines', 
            line=dict(color='black', width=8),
            name='‡∏Ñ‡∏≤‡∏ô', 
            showlegend=False
        ))
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤
        current_pos = 0
        max_reaction = max(reactions) if reactions else 1000
        
        for i in range(no_spans + 1):
            # ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏∏‡∏î‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
            fig_fbd.add_trace(go.Scatter(
                x=[current_pos], 
                y=[0], 
                mode='markers', 
                marker=dict(symbol='triangle-up', size=15, color='darkred'),
                name=f'Support {i+1}', 
                showlegend=False
            ))
            
            # ‡∏•‡∏π‡∏Å‡∏®‡∏£‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤ (‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á)
            if i < len(reactions) and reactions[i] > 0:
                arrow_height = reactions[i] / max_reaction * 300  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡∏π‡∏Å‡∏®‡∏£
                
                # ‡πÄ‡∏™‡πâ‡∏ô‡∏•‡∏π‡∏Å‡∏®‡∏£‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤‡∏à‡∏≤‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤
                fig_fbd.add_trace(go.Scatter(
                    x=[current_pos, current_pos], 
                    y=[-arrow_height, 0], 
                    mode='lines', 
                    line=dict(color='red', width=4),
                    showlegend=False
                ))
                
                # ‡∏´‡∏±‡∏ß‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏ä‡∏µ‡πâ‡∏Ç‡∏∂‡πâ‡∏ô
                fig_fbd.add_trace(go.Scatter(
                    x=[current_pos], 
                    y=[0], 
                    mode='markers', 
                    marker=dict(
                        symbol='triangle-up', 
                        size=10, 
                        color='red'
                    ),
                    showlegend=False
                ))
                
                # ‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤ (‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á)
                fig_fbd.add_annotation(
                    x=current_pos, 
                    y=-arrow_height - 50,
                    text=f'R{i+1}={reactions[i]:.0f} kg',
                    showarrow=False, 
                    font=dict(size=11, color='red', family='Arial Black'),
                    bgcolor='white',
                    bordercolor='red',
                    borderwidth=1
                )
            
            if i < no_spans:
                current_pos += span_lengths[i]
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ - ‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏ä‡∏µ‡πâ‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏ô‡∏Ñ‡∏≤‡∏ô‡∏•‡∏á‡∏°‡∏≤‡∏¢‡∏±‡∏á‡∏Ñ‡∏≤‡∏ô
        for i, length in enumerate(span_lengths):
            start_x = sum(span_lengths[:i])
            end_x = start_x + length
            load_height = 150  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏Ñ‡∏≤‡∏ô
            
            # ‡∏•‡∏π‡∏Å‡∏®‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ (‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô) ‡∏ä‡∏µ‡πâ‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏ô‡∏Ñ‡∏≤‡∏ô‡∏°‡∏≤‡∏¢‡∏±‡∏á‡∏Ñ‡∏≤‡∏ô
            n_arrows = max(12, int(length * 4))  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏®‡∏£‡πÉ‡∏´‡πâ‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ
            for j in range(n_arrows):
                arrow_x = start_x + (j + 0.5) * length / n_arrows
                
                # ‡πÄ‡∏™‡πâ‡∏ô‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏à‡∏≤‡∏Å‡∏ö‡∏ô‡∏Ñ‡∏≤‡∏ô‡∏•‡∏á‡∏°‡∏≤‡∏¢‡∏±‡∏á‡∏Ñ‡∏≤‡∏ô
                fig_fbd.add_trace(go.Scatter(
                    x=[arrow_x, arrow_x], 
                    y=[load_height, 5],  # ‡∏à‡∏≤‡∏Å‡∏ö‡∏ô‡∏Ñ‡∏≤‡∏ô‡∏•‡∏á‡∏°‡∏≤‡∏¢‡∏±‡∏á‡∏Ñ‡∏≤‡∏ô
                    mode='lines', 
                    line=dict(color='blue', width=2),
                    showlegend=False
                ))
                
                # ‡∏´‡∏±‡∏ß‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏ä‡∏µ‡πâ‡∏•‡∏á
                fig_fbd.add_trace(go.Scatter(
                    x=[arrow_x], 
                    y=[5], 
                    mode='markers', 
                    marker=dict(
                        symbol='triangle-down', 
                        size=8, 
                        color='blue'
                    ),
                    showlegend=False
                ))
            
            # ‡∏õ‡πâ‡∏≤‡∏¢‡πÇ‡∏´‡∏•‡∏î (‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô)
            fig_fbd.add_annotation(
                x=start_x + length/2, 
                y=load_height + 30,
                text=f'{total_load*1000:.0f} kg/m',
                showarrow=False, 
                font=dict(size=11, color='blue', family='Arial Black'),
                bgcolor='lightblue',
                bordercolor='blue',
                borderwidth=1
            )
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏Å‡∏ô
        fig_fbd.update_layout(
            height=400,  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
            xaxis=dict(
                title="‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á (m)",
                showgrid=True,
                range=[-0.5, total_length_fbd + 0.5]
            ),
            yaxis=dict(
                title="‡πÅ‡∏£‡∏á",
                showgrid=False,
                range=[-400, 300]  # ‡∏ä‡πà‡∏ß‡∏á‡∏à‡∏≤‡∏Å -400 (‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤) ‡∏ñ‡∏∂‡∏á 300 (‡πÇ‡∏´‡∏•‡∏î)
            ),
            margin=dict(l=50, r=20, t=20, b=50),
            plot_bgcolor='white',
            title=dict(
                text="‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏≠‡∏¥‡∏™‡∏£‡∏∞ - ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏£‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡∏Ñ‡∏≤‡∏ô",
                x=0.5,
                font=dict(size=14)
            )
        )
        
        st.plotly_chart(fig_fbd, use_container_width=True)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö advanced_app.py
        # 2. ‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡πÅ‡∏£‡∏á‡πÄ‡∏â‡∏∑‡∏≠‡∏ô (SFD)
        st.markdown("### üîπ ‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡πÅ‡∏£‡∏á‡πÄ‡∏â‡∏∑‡∏≠‡∏ô (Shear Force Diagram)")
        fig_shear = create_shear_diagram(x_points, shear)
        st.plotly_chart(fig_shear, use_container_width=True)
        
        # 2. ‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå (BMD)
        st.markdown("### üîπ ‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏î‡∏±‡∏î (Bending Moment Diagram)")
        fig_moment = create_moment_diagram(x_points, moment)
        st.plotly_chart(fig_moment, use_container_width=True)
        
        # 3. ‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß (Deflection Diagram)
        st.markdown("### üîπ ‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß (Deflection Diagram)")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
        fig_deflection = go.Figure()
        
        # ‡πÄ‡∏™‡πâ‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå
        fig_deflection.add_hline(y=0, line_dash="dash", line_color="black", line_width=1)
        
        # ‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß (‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á) - ‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏≠‡πà‡∏ô‡∏•‡∏á
        deflection_display = -deflection  # ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏≠‡πà‡∏ô‡∏•‡∏á
        
        fig_deflection.add_trace(go.Scatter(
            x=x_points, 
            y=deflection_display,  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            fill='tozeroy',
            fillcolor='rgba(128,0,128,0.3)',
            line=dict(color='purple', width=2),
            mode='lines',
            showlegend=False,
            hovertemplate='<b>Deflection (‡πÅ‡∏≠‡πà‡∏ô‡∏•‡∏á)</b><br>' +
                          'Position: %{x:.2f} m<br>' +
                          'Deflection: %{y:.2f} mm<br>' +
                          '<extra></extra>'
        ))
        
        # ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß)
        max_deflection_value = np.max(np.abs(deflection_display))
        max_deflection_idx = np.argmax(np.abs(deflection_display))
        
        if abs(max_deflection_value) > 1e-6:
            max_pos = x_points[max_deflection_idx]
            actual_deflection_display = deflection_display[max_deflection_idx]
            fig_deflection.add_trace(go.Scatter(
                x=[max_pos], y=[actual_deflection_display],
                mode='markers+text',
                text=[f"{actual_deflection_display:.2f} mm"],
                textposition="bottom center" if actual_deflection_display < 0 else "top center",
                marker=dict(color='red', size=8),
                showlegend=False
            ))
        
        fig_deflection.update_layout(
            height=300,
            xaxis=dict(
                title="‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á (m)",
                showgrid=True,
                range=[0, max(x_points)]
            ),
            yaxis_title="‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß (mm)",
            margin=dict(l=50, r=20, t=20, b=50),
            plot_bgcolor='white'
        )
        
        st.plotly_chart(fig_deflection, use_container_width=True)
        
        # Debug: Show analysis values for verification
        with st.expander("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì"):
            st.write("**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:**")
            st.write(f"- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: {len(x_points)} ‡∏à‡∏∏‡∏î")
            st.write(f"- ‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: {x_points[0]:.2f} ‡∏ñ‡∏∂‡∏á {x_points[-1]:.2f} ‡πÄ‡∏°‡∏ï‡∏£")
            st.write(f"- ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏ß‡∏°: {total_load:.3f} kN/m = {total_load*1000:.0f} kg/m")
            st.write(f"- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏£‡∏ß‡∏°: {sum(span_lengths):.2f} ‡πÄ‡∏°‡∏ï‡∏£")
            st.write(f"- EI ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {EI:.2e} Pa‚ãÖm‚Å¥")
            
            # Show sample values
            mid_idx = len(x_points) // 2
            st.write(f"**‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏≤‡∏ô (x={x_points[mid_idx]:.2f}m):**")
            st.write(f"- ‡πÅ‡∏£‡∏á‡πÄ‡∏â‡∏∑‡∏≠‡∏ô: {shear[mid_idx]:.1f} kg")
            st.write(f"- ‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏î‡∏±‡∏î: {moment[mid_idx]:.1f} kg‚ãÖm")
            st.write(f"- ‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß: {deflection[mid_idx]:.2f} mm")
            
            # Check deflection reasonableness
            current_max_deflection = np.max(np.abs(deflection))
            st.write(f"**‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß:**")
            st.write(f"- ‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_max_deflection:.2f} mm")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
            total_length = sum(span_lengths)
            l_250 = total_length * 1000 / 250
            l_300 = total_length * 1000 / 300
            l_400 = total_length * 1000 / 400
            
            st.write(f"**‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô:**")
            st.write(f"- L/250: {l_250:.1f} mm {'‚úÖ ‡∏ú‡πà‡∏≤‡∏ô' if current_max_deflection <= l_250 else '‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô'}")
            st.write(f"- L/300: {l_300:.1f} mm {'‚úÖ ‡∏ú‡πà‡∏≤‡∏ô' if current_max_deflection <= l_300 else '‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô'}")
            st.write(f"- L/400: {l_400:.1f} mm {'‚úÖ ‡∏ú‡πà‡∏≤‡∏ô' if current_max_deflection <= l_400 else '‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô'}")
            
            if current_max_deflection > 1000:  # More than 1 meter
                st.error(f"‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥! ({current_max_deflection:.0f} mm = {current_max_deflection/1000:.1f} m)")
                st.write("‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: EI ‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ, ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á, ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
            elif current_max_deflection > 100:  # More than 10 cm
                st.warning(f"‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏°‡∏≤‡∏Å ({current_max_deflection:.1f} mm = {current_max_deflection/10:.1f} cm)")
            else:
                st.success(f"‚úÖ ‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥ ({current_max_deflection:.1f} mm)")
        
        # Additional analysis information
        st.markdown("---")
        st.subheader("üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        
        col1, col2, col3 = st.columns(3)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        max_shear = np.max(shear)
        min_shear = np.min(shear)
        max_moment_abs = np.max(np.abs(moment))
        min_moment_value = np.min(moment)
        max_moment_value = np.max(moment)
        max_deflection_summary = np.max(np.abs(deflection))
        
        with col1:
            st.metric("‡πÅ‡∏£‡∏á‡πÄ‡∏â‡∏∑‡∏≠‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", f"{max_shear:.1f} kg", f"{max_shear/1000:.2f} kN")
            st.metric("‡πÅ‡∏£‡∏á‡πÄ‡∏â‡∏∑‡∏≠‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", f"{min_shear:.1f} kg", f"{min_shear/1000:.2f} kN")
        
        with col2:
            st.metric("‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ö‡∏ß‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", f"{max_moment_value:.1f} kg‚ãÖm", f"{max_moment_value/1000:.2f} kN‚ãÖm")
            st.metric("‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏•‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", f"{min_moment_value:.1f} kg‚ãÖm", f"{min_moment_value/1000:.2f} kN‚ãÖm")
        
        with col3:
            # Display deflection with appropriate formatting
            total_length = sum(span_lengths)
            deflection_ratio = f"L/{total_length*1000/max_deflection_summary:.0f}" if max_deflection_summary > 0 else "N/A"
            
            st.metric("‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", f"{max_deflection_summary:.2f} mm", deflection_ratio)
            st.metric("E√óI ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ", f"{EI:.2e} Pa‚ãÖm‚Å¥", f"E={e_value} GPa, I={i_value:.0f} cm‚Å¥")
        
        # Check deflection limits with proper warnings
        allowable_deflection = total_length * 1000 / 250  # L/250 limit
        
        if max_deflection_summary > 1000:  # More than 1 meter  
            st.error(f"‚ùå ‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ! ({max_deflection_summary:.0f} mm = {max_deflection_summary/1000:.2f} m)")
            st.write("**‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞:** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≤‡∏ô (‡πÄ‡∏û‡∏¥‡πà‡∏° E ‡∏´‡∏£‡∏∑‡∏≠ I)")
        elif max_deflection_summary <= allowable_deflection:
            st.success(f"‚úÖ ‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ (< L/250 = {allowable_deflection:.2f} mm)")
        else:
            st.error(f"‚ùå ‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ (> L/250 = {allowable_deflection:.2f} mm)")
        
        # Additional info
        st.info("üìä ‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î")
        
        # Data Tables Section
        st.markdown("---")
        st.subheader("üìä ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì")
        
        # Create detailed data table
        data_table = []
        n_points = min(50, len(x_points))  # Limit to 50 points for readability
        step = len(x_points) // n_points
        
        for i in range(0, len(x_points), step):
            data_table.append({
                "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (m)": round(x_points[i], 2),
                "‡πÅ‡∏£‡∏á‡πÄ‡∏â‡∏∑‡∏≠‡∏ô (kg)": round(shear[i], 3),
                "‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏î‡∏±‡∏î (kg‚ãÖm)": round(moment[i], 3),
                "‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß (mm)": round(deflection[i], 3)
            })
        
        # Display data table
        df_results = pd.DataFrame(data_table)
        st.dataframe(df_results, use_container_width=True, height=400)
        
        # Download button for data
        csv = df_results.to_csv(index=False, encoding='utf-8-sig')
        st.download_button(
            label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô CSV",
            data=csv,
            file_name=f"continuous_beam_analysis_{no_spans}spans.csv",
            mime="text/csv"
        )
        
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: {str(e)}")
        st.info("üí° ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å")
        
        if st.button("üöÄ ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å (advanced_app.py)", type="secondary"):
            st.switch_page("advanced_app.py")

st.markdown("---")
st.markdown("### üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
st.info("‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏£‡∏≤‡∏ü SFD ‡πÅ‡∏•‡∏∞ BMD ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å advanced_app.py")
