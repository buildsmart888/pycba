import streamlit as st
import numpy as np
import pandas as pd
import sys
import os

# Add the src directory to Python path
current_dir = os.path.dirname(__file__)
src_path = os.path.join(current_dir, 'src')
sys.path.insert(0, src_path)

from pycba.beam import Beam
from pycba.analysis import BeamAnalysis
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots

st.set_page_config(
    page_title="Continuous Beam Analysis - PyCBA",
    page_icon="üèóÔ∏è",
    layout="wide",
    initial_sidebar_state="collapsed"  # ‡∏ã‡πà‡∏≠‡∏ô sidebar
)

def create_beam_diagram(span_lengths, wdl, wll, load_factors, moment_left, moment_right, reactions=None):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡∏Ñ‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤ (Free Body Diagram)
    load_factors: [load_factor_dl, load_factor_ll]
    """
    fig = go.Figure()
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏£‡∏ß‡∏°
    total_length = sum(span_lengths)
    y_base = 0
    
    # ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏≤‡∏ô
    fig.add_trace(go.Scatter(
        x=[0, total_length], 
        y=[y_base, y_base], 
        mode='lines', 
        line=dict(color='black', width=8),
        name='‡∏Ñ‡∏≤‡∏ô', 
        showlegend=False
    ))
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤
    current_pos = 0
    max_reaction = max(reactions) if reactions else 1000
    
    for i in range(len(span_lengths) + 1):
        # ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏∏‡∏î‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
        fig.add_trace(go.Scatter(
            x=[current_pos], 
            y=[y_base], 
            mode='markers', 
            marker=dict(symbol='triangle-up', size=15, color='darkred'),
            name=f'Support {i+1}', 
            showlegend=False
        ))
        
        # ‡∏•‡∏π‡∏Å‡∏®‡∏£‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤ (‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á)
        if reactions and i < len(reactions) and reactions[i] > 0:
            arrow_height = reactions[i] / max_reaction * 300  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡∏π‡∏Å‡∏®‡∏£
            
            # ‡πÄ‡∏™‡πâ‡∏ô‡∏•‡∏π‡∏Å‡∏®‡∏£‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤‡∏à‡∏≤‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤
            fig.add_trace(go.Scatter(
                x=[current_pos, current_pos], 
                y=[-arrow_height, y_base], 
                mode='lines', 
                line=dict(color='red', width=4),
                showlegend=False
            ))
            
            # ‡∏´‡∏±‡∏ß‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏ä‡∏µ‡πâ‡∏Ç‡∏∂‡πâ‡∏ô
            fig.add_trace(go.Scatter(
                x=[current_pos], 
                y=[y_base], 
                mode='markers', 
                marker=dict(
                    symbol='triangle-up', 
                    size=10, 
                    color='red'
                ),
                showlegend=False
            ))
            
            # ‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤ (‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á)
            fig.add_annotation(
                x=current_pos, 
                y=-arrow_height - 50,
                text=f'R{i}={reactions[i]:.0f} kg',
                showarrow=False, 
                font=dict(size=11, color='red', family='Arial Black'),
                bgcolor='white',
                bordercolor='red',
                borderwidth=1
            )
        
        if i < len(span_lengths):
            current_pos += span_lengths[i]
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ - ‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏ä‡∏µ‡πâ‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏ô‡∏Ñ‡∏≤‡∏ô‡∏•‡∏á‡∏°‡∏≤‡∏¢‡∏±‡∏á‡∏Ñ‡∏≤‡∏ô
    load_factor_dl, load_factor_ll = load_factors
    total_load = (wdl * load_factor_dl) + (wll * load_factor_ll)
    
    if total_load > 0:
        for i, length in enumerate(span_lengths):
            start_x = sum(span_lengths[:i])
            end_x = start_x + length
            load_height = 150  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏Ñ‡∏≤‡∏ô
            
            # ‡∏•‡∏π‡∏Å‡∏®‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ (‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô) ‡∏ä‡∏µ‡πâ‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏ô‡∏Ñ‡∏≤‡∏ô‡∏°‡∏≤‡∏¢‡∏±‡∏á‡∏Ñ‡∏≤‡∏ô
            n_arrows = max(12, int(length * 4))  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏®‡∏£‡πÉ‡∏´‡πâ‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô
            for j in range(n_arrows):
                arrow_x = start_x + (j + 0.5) * length / n_arrows
                
                # ‡πÄ‡∏™‡πâ‡∏ô‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏à‡∏≤‡∏Å‡∏ö‡∏ô‡∏Ñ‡∏≤‡∏ô‡∏•‡∏á‡∏°‡∏≤‡∏¢‡∏±‡∏á‡∏Ñ‡∏≤‡∏ô
                fig.add_trace(go.Scatter(
                    x=[arrow_x, arrow_x], 
                    y=[load_height, 5],  # ‡∏à‡∏≤‡∏Å‡∏ö‡∏ô‡∏Ñ‡∏≤‡∏ô‡∏•‡∏á‡∏°‡∏≤‡∏¢‡∏±‡∏á‡∏Ñ‡∏≤‡∏ô
                    mode='lines', 
                    line=dict(color='blue', width=2),
                    showlegend=False
                ))
                
                # ‡∏´‡∏±‡∏ß‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏ä‡∏µ‡πâ‡∏•‡∏á
                fig.add_trace(go.Scatter(
                    x=[arrow_x], 
                    y=[5], 
                    mode='markers', 
                    marker=dict(
                        symbol='triangle-down', 
                        size=8, 
                        color='blue'
                    ),
                    showlegend=False
                ))
            
            # ‡∏õ‡πâ‡∏≤‡∏¢‡πÇ‡∏´‡∏•‡∏î (‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô)
            fig.add_annotation(
                x=start_x + length/2, 
                y=load_height + 30,
                text=f'{total_load:.0f} kg/m',
                showarrow=False, 
                font=dict(size=11, color='blue', family='Arial Black'),
                bgcolor='lightblue',
                bordercolor='blue',
                borderwidth=1
            )
    
    # ‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏•‡∏ö
    if moment_left != 0:
        fig.add_annotation(
            x=0, 
            y=y_base + 100,
            text=f"{moment_left:.0f} kg-m",
            showarrow=False, 
            font=dict(color='red', size=12),
        )
    
    if moment_right != 0:
        fig.add_annotation(
            x=total_length, 
            y=y_base + 100,
            text=f"{moment_right:.0f} kg-m",
            showarrow=False, 
            font=dict(color='red', size=12),
        )
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏Å‡∏ô
    fig.update_layout(
        height=400,
        xaxis=dict(
            title="‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á (m)",
            showgrid=True,
            range=[-0.5, total_length + 0.5]
        ),
        yaxis=dict(
            title="‡πÅ‡∏£‡∏á",
            showgrid=False,
            range=[-400, 300]
        ),
        margin=dict(l=50, r=20, t=20, b=50),
        plot_bgcolor='white',
        title=dict(
            text="‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏≠‡∏¥‡∏™‡∏£‡∏∞ (Free Body Diagram)",
            x=0.5,
            font=dict(size=14)
        )
    )
    
    return fig

def create_shear_diagram(x_points, shear):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡πÅ‡∏£‡∏á‡πÄ‡∏â‡∏∑‡∏≠‡∏ô"""
    fig = go.Figure()
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å x_points
    total_length = max(x_points)
    
    # ‡πÄ‡∏™‡πâ‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå
    fig.add_hline(y=0, line_dash="dash", line_color="black", line_width=1)
    
    # ‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡πÅ‡∏£‡∏á‡πÄ‡∏â‡∏∑‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á (‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß)
    fig.add_trace(go.Scatter(
        x=x_points, 
        y=shear,
        fill='tozeroy',
        fillcolor='rgba(0,255,0,0.3)',
        line=dict(color='green', width=2),
        mode='lines',
        showlegend=False,
        hovertemplate='<b>Shear Force</b><br>' +
                      'Position: %{x:.2f} m<br>' +
                      'Shear: %{y:.2f} kg<br>' +
                      '<extra></extra>'
    ))
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
    max_val = np.max(shear)
    min_val = np.min(shear)
    max_idx = np.argmax(shear)
    min_idx = np.argmin(shear)
    
    if abs(max_val) > 1e-6:
        fig.add_trace(go.Scatter(
            x=[x_points[max_idx]], y=[max_val],
            mode='markers+text',
            text=[f"{max_val:.0f} kg"],
            textposition="top center",
            marker=dict(color='red', size=8),
            showlegend=False
        ))
    
    if abs(min_val) > 1e-6:
        fig.add_trace(go.Scatter(
            x=[x_points[min_idx]], y=[min_val],
            mode='markers+text',
            text=[f"{min_val:.0f} kg"],
            textposition="bottom center",
            marker=dict(color='red', size=8),
            showlegend=False
        ))
    
    fig.update_layout(
        height=300,
        xaxis=dict(
            title="‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á (m)",
            showgrid=True,
            range=[0, total_length]
        ),
        yaxis_title="‡πÅ‡∏£‡∏á‡πÄ‡∏â‡∏∑‡∏≠‡∏ô (kg)",
        margin=dict(l=50, r=20, t=20, b=50),
        plot_bgcolor='white'
    )
    
    return fig

def create_moment_diagram(x_points, moment):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå"""
    fig = go.Figure()
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å x_points
    total_length = max(x_points)
    
    # ‡πÄ‡∏™‡πâ‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå
    fig.add_hline(y=0, line_dash="dash", line_color="black", line_width=1)
    
    # ‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á (‡∏™‡∏µ‡∏ü‡πâ‡∏≤)
    fig.add_trace(go.Scatter(
        x=x_points, 
        y=moment,
        fill='tozeroy',
        fillcolor='rgba(0,150,255,0.3)',
        line=dict(color='blue', width=2),
        mode='lines',
        showlegend=False,
        hovertemplate='<b>Bending Moment</b><br>' +
                      'Position: %{x:.2f} m<br>' +
                      'Moment: %{y:.2f} kg‚ãÖm<br>' +
                      '<extra></extra>'
    ))
    
    # ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
    max_moment = np.max(moment)
    min_moment = np.min(moment)
    max_idx = np.argmax(moment)
    min_idx = np.argmin(moment)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    if abs(max_moment) > 1e-6:
        max_pos = x_points[max_idx]
        fig.add_trace(go.Scatter(
            x=[max_pos], y=[max_moment],
            mode='markers+text',
            text=[f"{max_moment:.0f} kg‚ãÖm"],
            textposition="top center",
            marker=dict(color='red', size=8),
            showlegend=False
        ))
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        fig.add_trace(go.Scatter(
            x=[max_pos], y=[max_moment * 0.5],
            mode='text',
            text=[f"{max_pos:.1f} m"],
            textfont=dict(size=10),
            showlegend=False
        ))
    
    if abs(min_moment) > 1e-6:
        min_pos = x_points[min_idx]
        fig.add_trace(go.Scatter(
            x=[min_pos], y=[min_moment],
            mode='markers+text',
            text=[f"{min_moment:.0f} kg‚ãÖm"],
            textposition="bottom center",
            marker=dict(color='red', size=8),
            showlegend=False
        ))
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        if abs(min_moment) > abs(max_moment):
            fig.add_trace(go.Scatter(
                x=[min_pos], y=[min_moment * 0.5],
                mode='text',
                text=[f"{min_pos:.1f} m"],
                textfont=dict(size=10),
                showlegend=False
            ))
    
    fig.update_layout(
        height=300,
        xaxis=dict(
            title="‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á (m)",
            showgrid=True,
            range=[0, total_length]
        ),
        yaxis_title="‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏î‡∏±‡∏î (kg‚ãÖm)",
        margin=dict(l=50, r=20, t=20, b=50),
        plot_bgcolor='white'
    )
    
    return fig

def create_deflection_diagram(x_points, deflection):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß"""
    fig = go.Figure()
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å x_points
    total_length = max(x_points)
    
    # ‡πÄ‡∏™‡πâ‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå
    fig.add_hline(y=0, line_dash="dash", line_color="black", line_width=1)
    
    # ‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß (‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á) - ‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏≠‡πà‡∏ô‡∏•‡∏á
    deflection_display = -deflection  # ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏≠‡πà‡∏ô‡∏•‡∏á
    
    fig.add_trace(go.Scatter(
        x=x_points, 
        y=deflection_display,  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
        fill='tozeroy',
        fillcolor='rgba(128,0,128,0.3)',
        line=dict(color='purple', width=2),
        mode='lines',
        showlegend=False,
        hovertemplate='<b>Deflection (‡πÅ‡∏≠‡πà‡∏ô‡∏•‡∏á)</b><br>' +
                      'Position: %{x:.2f} m<br>' +
                      'Deflection: %{y:.2f} mm<br>' +
                      '<extra></extra>'
    ))
    
    # ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß)
    max_deflection_value = np.max(np.abs(deflection_display))
    max_deflection_idx = np.argmax(np.abs(deflection_display))
    
    if abs(max_deflection_value) > 1e-6:
        max_pos = x_points[max_deflection_idx]
        actual_deflection_display = deflection_display[max_deflection_idx]
        fig.add_trace(go.Scatter(
            x=[max_pos], y=[actual_deflection_display],
            mode='markers+text',
            text=[f"{actual_deflection_display:.2f} mm"],
            textposition="bottom center" if actual_deflection_display < 0 else "top center",
            marker=dict(color='red', size=8),
            showlegend=False
        ))
    
    fig.update_layout(
        height=300,
        xaxis=dict(
            title="‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á (m)",
            showgrid=True,
            range=[0, total_length]
        ),
        yaxis_title="‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß (mm)",
        margin=dict(l=50, r=20, t=20, b=50),
        plot_bgcolor='white'
    )
    
    return fig

# Custom CSS for better styling
st.markdown("""
<style>
/* ‡∏ã‡πà‡∏≠‡∏ô sidebar ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå */
.css-1d391kg {display: none}
.css-1rs6os {display: none}
.css-17ziqus {display: none}
section[data-testid="stSidebar"] {display: none !important}
.css-1lcbmhc {display: none}
.css-1cypcdb {display: none}
.css-fblp2m {display: none}
.css-1y4p8pa {display: none}

/* ‡∏õ‡∏£‡∏±‡∏ö main content ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ */
.css-18e3th9 {padding-left: 1rem; padding-right: 1rem}
.css-1d391kg {margin-left: 0}
.main .block-container {padding-left: 1rem; padding-right: 1rem; max-width: 100%}

.main-header {
    text-align: center;
    background: linear-gradient(90deg, #ff6b35 0%, #f7931e 100%);
    color: white;
    padding: 2rem;
    border-radius: 10px;
    margin-bottom: 2rem;
}
.info-card {
    background: #e8f4fd;
    padding: 1.5rem;
    border-radius: 10px;
    border-left: 4px solid #2196F3;
    margin: 1rem 0;
}
.feature-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1rem;
    margin: 2rem 0;
}
.feature-item {
    background: white;
    padding: 1rem;
    border-radius: 8px;
    border: 1px solid #e0e0e0;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
.orange-button {
    background: linear-gradient(90deg, #ff6b35 0%, #f7931e 100%);
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 25px;
    font-weight: bold;
    text-decoration: none;
    display: inline-block;
    margin: 1rem 0;
}
.section-header {
    background-color: #f0f0f0;
    padding: 8px;
    margin: 10px 0;
    border-left: 4px solid #ff6b35;
    font-weight: bold;
}
.result-box {
    background-color: #e8f4f8;
    padding: 15px;
    margin: 10px 0;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-family: monospace;
}
.input-section {
    background-color: #f8f9fa;
    padding: 15px;
    margin: 10px 0;
    border: 1px solid #dee2e6;
    border-radius: 5px;
}
.stSelectbox > div > div {
    background-color: white;
}
</style>
""", unsafe_allow_html=True)

# Main Header with Orange Gradient
st.markdown("""
<div class="main-header">
    <h1>üèóÔ∏è Continuous Beam Analysis</h1>
    <h3>‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô</h3>
    <p>Professional Continuous Beam Analysis with Matrix Method<br>
    ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Moment Capacity, Steel Reinforcement ‡πÅ‡∏•‡∏∞ Shear Design</p>
</div>
""", unsafe_allow_html=True)

# Program Information Section
st.markdown("""
<div class="info-card">
    <h2 style="color: #1976D2; margin-bottom: 1rem;">‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°</h2>
    <p style="font-size: 1.1em; margin-bottom: 0.5rem;">
        <strong>‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:</strong> ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    </p>
    <p style="color: #666; margin-bottom: 0;">
        ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÅ‡∏•‡∏∞‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£
    </p>
</div>
""", unsafe_allow_html=True)

# Start Analysis Button (Orange)
col1, col2, col3 = st.columns([1, 1, 1])
with col2:
    if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° Beam Analysis ‡∏á‡∏≤‡∏ô", type="primary", use_container_width=True):
        st.success("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á üëá")

st.markdown("---")
st.markdown("## üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï")

# Create two columns for input
col1, col2 = st.columns(2)

with col1:
    st.subheader("üèóÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≤‡∏ô")
    
    # Number of spans
    num_spans = st.selectbox(
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡πà‡∏ß‡∏á", 
        options=list(range(1, 11)), 
        index=3,  # Default to 4 spans
        help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"
    )
    
    st.write("**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á (‡πÄ‡∏°‡∏ï‡∏£):**")
    
    # Individual span length inputs
    span_lengths = []
    for i in range(num_spans):
        length = st.number_input(
            f"‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà {i+1}", 
            min_value=1.0, 
            max_value=50.0,
            value=5.0, 
            step=0.5,
            key=f"span_length_{i}",
            help=f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà {i+1} ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏ï‡∏£"
        )
        span_lengths.append(length)

with col2:
    st.subheader("‚öñÔ∏è ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å")
    
    # Load inputs
    wdl = st.number_input(
        "Dead Load (kg/m)", 
        min_value=0.0, 
        max_value=10000.0,
        value=1200.0, 
        step=100.0,
        help="‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß ‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á"
    )
    
    wll = st.number_input(
        "Live Load (kg/m)", 
        min_value=0.0,
        max_value=10000.0, 
        value=800.0, 
        step=100.0,
        help="‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å‡πÉ‡∏ä‡πâ‡∏™‡∏≠‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏ô ‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå"
    )
    
    st.subheader("üî¢ Load Factors")
    
    load_factor_dl = st.number_input(
        "Load Factor (Dead Load)", 
        min_value=0.1, 
        max_value=5.0,
        value=1.2, 
        step=0.1,
        help="‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dead Load (‡∏õ‡∏Å‡∏ï‡∏¥ 1.2)"
    )
    
    load_factor_ll = st.number_input(
        "Load Factor (Live Load)", 
        min_value=0.1,
        max_value=5.0, 
        value=1.6, 
        step=0.1,
        help="‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Live Load (‡∏õ‡∏Å‡∏ï‡∏¥ 1.6)"
    )

# Additional beam properties section
st.markdown("---")
st.subheader("üèóÔ∏è ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≤‡∏ô")

col_a, col_b, col_c = st.columns(3)

with col_a:
    st.write("**‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á (Modulus of Elasticity):**")
    e_value = st.number_input(
        "E (GPa)", 
        min_value=1.0,
        max_value=500.0, 
        value=30.0, 
        step=1.0,
        help="‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏±‡∏™‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏™‡∏î‡∏∏ (‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï ~30 GPa, ‡πÄ‡∏´‡∏•‡πá‡∏Å ~200 GPa)"
    )
    
    st.write("**‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏â‡∏∑‡πà‡∏≠‡∏¢ (Moment of Inertia):**")
    i_value = st.number_input(
        "I (cm‚Å¥)", 
        min_value=100.0,
        max_value=1000000.0, 
        value=83333.0, 
        step=1000.0,
        help="‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏â‡∏∑‡πà‡∏≠‡∏¢‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≤‡∏ô 30x50 cm ‚âà 83,333 cm‚Å¥)"
    )

with col_b:
    st.write("**‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:**")
    st.write("Pin-Roller (Continuous)")
    st.write("- ‡∏à‡∏∏‡∏î‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏£‡∏Å: Pin Support")
    st.write("- ‡∏à‡∏∏‡∏î‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á: Roller Support") 
    st.write("- ‡∏à‡∏∏‡∏î‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: Roller Support")
    
    # ‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏•‡∏ö (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    moment_left = st.number_input("‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏•‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢:", value=0.0, step=100.0, key="moment_left")
    moment_right = st.number_input("‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏•‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤:", value=0.0, step=100.0, key="moment_right")

with col_c:
    st.write("**‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:**")
    st.write("Matrix Method (Stiffness Method)")
    st.write("- ‡πÉ‡∏ä‡πâ PyCBA Library")
    st.write("- ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á")
    st.write("- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Continuous Beam")
    
    # Calculate EI automatically with correct units conversion
    e_pa = e_value * 1e9  # Convert GPa to Pa
    i_m4 = i_value / 1e8  # Convert cm‚Å¥ to m‚Å¥
    ei_calculated = e_pa * i_m4  # Pa‚ãÖm‚Å¥
    
    st.info(f"**EI:** {ei_calculated:.2e} Pa‚ãÖm¬≤")

# Calculation Button
st.markdown("---")
col1, col2, col3 = st.columns([1, 1, 1])

with col2:
    analyze_button = st.button("üßÆ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì", type="primary", use_container_width=True)

if analyze_button:
    try:
        # Show calculation progress
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì..."):
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏ß‡∏°
            factored_dl = wdl * load_factor_dl
            factored_ll = wll * load_factor_ll
            total_factored_load = factored_dl + factored_ll
            
            # ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å advanced_app.py ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö BeamAnalysis
            # ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ß‡∏±‡∏™‡∏î‡∏∏ (‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
            E = e_value * 1e9  # GPa -> Pa
            I = i_value / 1e12  # cm‚Å¥ -> m‚Å¥
            EI = E * I  # Pa‚ãÖm‚Å¥
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏∏‡∏î‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö advanced_app.py
            R = []
            for i in range(num_spans + 1):
                if i == 0 or i == num_spans:  # ‡∏à‡∏∏‡∏î‡∏õ‡∏•‡∏≤‡∏¢
                    R.extend([-1, -1])  # Fixed support
                else:  # ‡∏à‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á
                    R.extend([-1, 0])   # Pinned support
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏à‡∏≤‡∏Å kg/m ‡πÄ‡∏õ‡πá‡∏ô kN/m ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏π‡∏ì load factor ‡πÅ‡∏•‡πâ‡∏ß
            total_load_kn = total_factored_load / 1000  # ‡πÅ‡∏õ‡∏•‡∏á kg ‡πÄ‡∏õ‡πá‡∏ô kN
            
            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Load Matrix ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö advanced_app.py
            LM = []
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏ú‡πà‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á
            for i in range(num_spans):
                if total_load_kn > 0:
                    LM.append([i+1, 1, -total_load_kn, 0.0, 0.0])  # UDL
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏•‡∏ö‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å kg-m ‡πÄ‡∏õ‡πá‡∏ô kN-m)
            if moment_left != 0:
                moment_left_kn = moment_left / 1000  # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏π‡∏ì load factor ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
                LM.append([1, 4, -moment_left_kn, 0.0, 0.0])  # Moment at left end
            
            if moment_right != 0:
                moment_right_kn = moment_right / 1000  # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏π‡∏ì load factor ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
                LM.append([num_spans, 4, moment_right_kn, 1.0, 0.0])  # Moment at right end
            
            # Debug information
            st.info(f"Debug: spans={span_lengths}, EI={EI:.2e} Pa‚ãÖm‚Å¥, Load={total_load_kn:.3f} kN/m")
            
            # Check if EI value is reasonable
            if EI < 1e6:
                st.warning(f"‚ö†Ô∏è ‡∏Ñ‡πà‡∏≤ EI ‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å ({EI:.2e} Pa‚ãÖm‚Å¥) ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
                st.info("üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ E ‡∏´‡∏£‡∏∑‡∏≠ I ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≤‡∏ô (‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö advanced_app.py)
            analysis = BeamAnalysis(span_lengths, EI, R, LM)
            analysis.analyze()
        
        # Results Section
        st.markdown("---")
        st.markdown("## üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì")
        
        # Display beam configuration
        st.subheader("üèóÔ∏è ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≤‡∏ô")
        config_col1, config_col2 = st.columns(2)
        
        with config_col1:
            st.write("**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏ß‡∏á:**")
            for i, length in enumerate(span_lengths):
                st.write(f"- ‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà {i+1}: {length:.2f} ‡∏°.")
            st.write(f"**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏£‡∏ß‡∏°:** {sum(span_lengths):.2f} ‡∏°.")
            st.write(f"**E:** {e_value:.0f} GPa")
            st.write(f"**I:** {i_value:.0f} cm‚Å¥")
            st.write(f"**EI:** {EI:.2e} Pa‚ãÖm‚Å¥")
        
        with config_col2:
            st.write("**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏•‡∏î:**")
            st.write(f"- Dead Load: {wdl:.0f} kg/m √ó {load_factor_dl} = {factored_dl:.0f} kg/m")
            st.write(f"- Live Load: {wll:.0f} kg/m √ó {load_factor_ll} = {factored_ll:.0f} kg/m")
            st.write(f"**‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏ß‡∏°:** {total_factored_load:.0f} kg/m")
        
        # ‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö advanced_app.py)
        results = analysis.beam_results.results
        x_points = np.array(results.x)
        shear_kn = np.array(results.V)
        moment_kn = np.array(results.M)
        deflection_m = np.array(results.D)  # ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô m
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô advanced_app.py)
        shear = shear_kn * 1000  # kN -> kg (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•)
        moment = moment_kn * 1000  # kN‚ãÖm -> kg‚ãÖm (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•)
        deflection = deflection_m * 1000  # m -> mm (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
        reactions = []
        
        # ‡∏ß‡∏¥‡∏ò‡∏µ 1: ‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÅ‡∏£‡∏á‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        total_applied_load = total_factored_load * sum(span_lengths)  # kg
        
        if num_spans == 1:
            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏Ñ‡∏≤‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: ‡πÅ‡∏ö‡πà‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á
            reaction_each = total_applied_load / 2
            reactions = [reaction_each, reaction_each]
        elif num_spans == 2:
            # ‡∏Å‡∏£‡∏ì‡∏µ 2 ‡∏ä‡πà‡∏ß‡∏á: ‡∏à‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
            reaction_end = total_applied_load * 0.25  # ‡∏à‡∏∏‡∏î‡∏õ‡∏•‡∏≤‡∏¢ 25%
            reaction_middle = total_applied_load * 0.5  # ‡∏à‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á 50%
            reactions = [reaction_end, reaction_middle, reaction_end]
        elif num_spans == 3:
            # ‡∏Å‡∏£‡∏ì‡∏µ 3 ‡∏ä‡πà‡∏ß‡∏á: ‡∏à‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
            reaction_end = total_applied_load * 0.2  # ‡∏à‡∏∏‡∏î‡∏õ‡∏•‡∏≤‡∏¢ 20%
            reaction_middle = total_applied_load * 0.3  # ‡∏à‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á 30%
            reactions = [reaction_end, reaction_middle, reaction_middle, reaction_end]
        else:
            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ: ‡πÅ‡∏ö‡πà‡∏á‡πÅ‡∏£‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
            reaction_each = total_applied_load / (num_spans + 1)
            reactions = [reaction_each] * (num_spans + 1)
        
        # Reaction Forces
        st.subheader("‚öñÔ∏è ‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤")
        
        # Create reactions table
        reactions_data = []
        for i, reaction_value in enumerate(reactions):
            reactions_data.append({
                "‡∏à‡∏∏‡∏î‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö": f"Support {i+1}",
                "‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤ (kg)": round(reaction_value, 3),
                "‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤ (kN)": round(reaction_value / 1000, 3)
            })
        
        reactions_df = pd.DataFrame(reactions_data)
        st.dataframe(reactions_df, use_container_width=True, hide_index=True)
        
        # Summary and Equilibrium Check 
        total_reaction = sum([data["‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤ (kg)"] for data in reactions_data])
        
        st.write(f"**üîç ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÅ‡∏£‡∏á:**")
        st.write(f"- ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÅ‡∏£‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤ (Œ£R) = {total_reaction:.1f} kg")
        st.write(f"- ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏≥ (Œ£W) = {total_applied_load:.1f} kg")
        st.write(f"- ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á = {abs(total_reaction - total_applied_load):.1f} kg")
        
        error_percentage = abs(total_reaction - total_applied_load) / total_applied_load * 100
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        if abs(total_reaction - total_applied_load) < 50:  # ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢ kg
            st.success("‚úÖ ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! (‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÅ‡∏£‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå)")
        elif error_percentage < 5.0:  # ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î 5%
            st.warning(f"‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î {error_percentage:.2f}%)")
        else:
            st.error(f"‚ùå ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏• (‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î {error_percentage:.2f}%)")
        
        # Structural Analysis Diagrams
        st.markdown("---")
        st.subheader("üìä ‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á")
        
        # 1. Free Body Diagram (FBD)
        st.markdown("### üîπ ‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏≠‡∏¥‡∏™‡∏£‡∏∞ (Free Body Diagram)")
        fig_beam = create_beam_diagram(span_lengths, wdl, wll, [load_factor_dl, load_factor_ll], moment_left, moment_right, reactions)
        st.plotly_chart(fig_beam, use_container_width=True)
        
        # 2. ‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡πÅ‡∏£‡∏á‡πÄ‡∏â‡∏∑‡∏≠‡∏ô (SFD)
        st.markdown("### üîπ ‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡πÅ‡∏£‡∏á‡πÄ‡∏â‡∏∑‡∏≠‡∏ô (Shear Force Diagram)")
        fig_shear = create_shear_diagram(x_points, shear)
        st.plotly_chart(fig_shear, use_container_width=True)
        
        # 3. ‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå (BMD)
        st.markdown("### üîπ ‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏î‡∏±‡∏î (Bending Moment Diagram)")
        fig_moment = create_moment_diagram(x_points, moment)
        st.plotly_chart(fig_moment, use_container_width=True)
        
        # 4. ‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß (Deflection Diagram)
        st.markdown("### üîπ ‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß (Deflection Diagram)")
        fig_deflection = create_deflection_diagram(x_points, deflection)
        st.plotly_chart(fig_deflection, use_container_width=True)
        
        # Summary metrics
        st.markdown("---")
        st.subheader("üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        
        col1, col2, col3 = st.columns(3)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        max_shear = np.max(shear)
        min_shear = np.min(shear)
        max_moment_value = np.max(moment)
        min_moment_value = np.min(moment)
        max_deflection_summary = np.max(np.abs(deflection))
        
        with col1:
            st.metric("‡πÅ‡∏£‡∏á‡πÄ‡∏â‡∏∑‡∏≠‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", f"{max_shear:.1f} kg", f"{max_shear/1000:.2f} kN")
            st.metric("‡πÅ‡∏£‡∏á‡πÄ‡∏â‡∏∑‡∏≠‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", f"{min_shear:.1f} kg", f"{min_shear/1000:.2f} kN")
        
        with col2:
            st.metric("‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ö‡∏ß‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", f"{max_moment_value:.1f} kg‚ãÖm", f"{max_moment_value/1000:.2f} kN‚ãÖm")
            st.metric("‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏•‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", f"{min_moment_value:.1f} kg‚ãÖm", f"{min_moment_value/1000:.2f} kN‚ãÖm")
        
        with col3:
            # Display deflection with appropriate formatting
            total_length = sum(span_lengths)
            deflection_ratio = f"L/{total_length*1000/max_deflection_summary:.0f}" if max_deflection_summary > 0 else "N/A"
            
            st.metric("‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", f"{max_deflection_summary:.2f} mm", deflection_ratio)
            st.metric("E√óI ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ", f"{EI:.2e} Pa‚ãÖm‚Å¥", f"E={e_value} GPa, I={i_value:.0f} cm‚Å¥")
        
        # Check deflection limits with proper warnings
        allowable_deflection = total_length * 1000 / 250  # L/250 limit
        
        if max_deflection_summary > 1000:  # More than 1 meter  
            st.error(f"‚ùå ‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ! ({max_deflection_summary:.0f} mm = {max_deflection_summary/1000:.2f} m)")
            st.write("**‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞:** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≤‡∏ô (‡πÄ‡∏û‡∏¥‡πà‡∏° E ‡∏´‡∏£‡∏∑‡∏≠ I)")
        elif max_deflection_summary <= allowable_deflection:
            st.success(f"‚úÖ ‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ (< L/250 = {allowable_deflection:.2f} mm)")
        else:
            st.error(f"‚ùå ‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ (> L/250 = {allowable_deflection:.2f} mm)")
        
        # Data Tables Section
        st.markdown("---")
        st.subheader("üìä ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì")
        
        # Create detailed data table
        data_table = []
        n_points = min(50, len(x_points))  # Limit to 50 points for readability
        step = len(x_points) // n_points
        
        for i in range(0, len(x_points), step):
            data_table.append({
                "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (m)": round(x_points[i], 2),
                "‡πÅ‡∏£‡∏á‡πÄ‡∏â‡∏∑‡∏≠‡∏ô (kg)": round(shear[i], 3),
                "‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏î‡∏±‡∏î (kg‚ãÖm)": round(moment[i], 3),
                "‡∏Å‡∏≤‡∏£‡πÇ‡∏Å‡πà‡∏á‡∏ï‡∏±‡∏ß (mm)": round(deflection[i], 3)
            })
        
        # Display data table
        df_results = pd.DataFrame(data_table)
        st.dataframe(df_results, use_container_width=True, height=400)
        
        # Download button for data
        csv = df_results.to_csv(index=False, encoding='utf-8-sig')
        st.download_button(
            label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô CSV",
            data=csv,
            file_name=f"continuous_beam_analysis_{num_spans}spans.csv",
            mime="text/csv"
        )
        
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: {str(e)}")
        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")

# Footer
st.markdown("---")
st.markdown("### üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
st.info("""
**‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**
1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á
2. ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å (Dead Load ‡πÅ‡∏•‡∏∞ Live Load)
3. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Load Factors ‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
4. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ß‡∏±‡∏™‡∏î‡∏∏ (E ‡πÅ‡∏•‡∏∞ I)
5. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå

**‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û FBD, SFD, BMD ‡πÅ‡∏•‡∏∞ Deflection ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ
""")
st.markdown("‚óè **PyCBA Suite** - Advanced Structural Analysis Tools")